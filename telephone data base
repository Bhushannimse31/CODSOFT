import array as hashTable

def initial():
    print(hashTable)  # Print empty hash table.

def display():
    for i in range(0,7):
        print("Index[",i,"]=", hashTable[i]) # Print hash table along with data.

def linearInsert(value):  # this function is used to insert values into hash table
    key = value % size
    if (hashTable[key] == -1):
        hashTable[key] = value
        print(value, "inserted at arr", key)
    else:
        print("Collision : arr", key, "has element", hashTable[key], "already!")
        print("Unable to insert", value, "into hash table")
        i = 0
        count = 0
        while (i < size):
            if (hashTable[i] != -1):
                count += 1
            i += 1
        if (count == size):  # checking for the hash full
            print("Hash Table Is Full Hence ", value, " Can not Be Inserted")
            print(hashTable)
        else:  # logic of linear probiing
            i = key
            for i in range(key, size):
                key1 = (i + 1) % size # calculating next empty location address using linear probing formula
                if (hashTable[key1] == -1):  # if location is empty insert data
                    hashTable[key1] = value
                    print(value, "inserted at arr", key1)
                    break;


def quadraticInsert(value):  # this function is used to insert values into hash table
    key = value % size
    if (hashTable[key] == -1):
        hashTable[key] = value
        print(value, "inserted at arr", key)
    else:
        print("Collision : arr", key, "has element", hashTable[key], "already!")
        i = 0
        count = 0
        while (i < size):
            if (hashTable[i] != -1):
                count += 1
            i += 1
        if (count == size):  # checking for the hash full
            print("Hash Table Is Full Hence ", value, " Can not Be Inserted")
            display()
        else:

            for i in range(0, size):
                key1 = (key + i * i) % size  # Quadratic Probing formula
                if (hashTable[key1] == -1):
                    hashTable[key1] = value;
                    print(value, "inserted at arr", key1)
                    break;

def search(value):  # this function is used to search value into hash table
    key = value % size
    if (hashTable[key] == value):
        print(value, "Found at", key, "th Index location")
    else:
        print(value, "Not Found at", key, "th Index location")


def delHash(value):  # this function is used to delete value from hash table if present
    key = value % size
    if (hashTable[key] == value):
        print(value, "Sussfully deleted from hash table")
        hashTable[key] = -1
    else:
        print(value, "Not Found at", key, "th Index location")


if _name_ == "_main_":
    # Create an empty array of size 7 and Initialize all index to -1
    print("Enter the size of Hashtable")
    size = int(input())
    hashTable = hashTable.array('i', [-1] * size)
    initial()  # Actual code starting to execute from this line.
    while(True):
        print("1. Enter Phone Number in hashtable using linear Probing")
        print("2. Enter Phone Number in hashtable using Quadratic Probing")
        print("3. Search Phone Number")
        print("4. Display Phone Directory")
        print("5. Exit")
        ch = int(input())
        if(ch == 1):
            print("Enter the Phone Number you want to insert: ")
            value = int(input())
            linearInsert(value)
        elif(ch == 2):
            print("Enter the Phone Number you want to insert: ")
            value = int(input())
            quadraticInsert(value)
        elif(ch == 3):
            print("Enter the Phone Number you want to search: ")
            value = int(input())
            search(value)
        elif(ch == 4):
            display()
        elif(ch == 5):
            quit()
