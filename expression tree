#include <iostream>
#include <cstdlib>
using namespace std;

class node
{
    public:
        node *left;
        string word;
        string meaning;
        node *right;
};

class dict
{
    public:
        node *root;
        dict()
        {
            root = NULL;
        }
        void create();
        void insert(node*, node*);
        void inorder(node*);
        void treeTraversal();
        void search(node*, string);
        void descend(node*);
        void ascend(node*);
        node* deleteNode(node*, string);

};

void dict::create()
{
    node *temp;
    temp = new node;
    temp->left = temp->right = NULL;
    cout<<"Enter Word: "<<endl; 
    cin>> temp->word;
    cout<<"Enter Meaning: "<<endl;
    cin>>temp->meaning;
    if(root == NULL)
        root = temp;
    else
        insert(root, temp);
}

void dict::insert(node *root, node *temp) 
{
    if(temp->word < root->word)
    {
        if(root->left == NULL) 
            root->left = temp;
        else 
            insert(root->left, temp);
    }
    else
    {
        if(root->right == NULL) 
            root->right = temp;
        else 
            insert(root->right, temp);
    }
}

void dict::inorder(node *temp) 
{
    if(temp != NULL)
    {
        inorder(temp->left);
        cout<<"Word :"<<temp->word<<" ";
        cout<<"Meaning :"<<temp->meaning<<" "<<endl;
        inorder(temp->right);
    }
}

void dict::treeTraversal()
{ 
    cout<<"\n Inorder Traversal"<<endl;
    inorder(root); 
    cout<<endl;
}

void dict::search(node *root, string key)
{
    if(key<root->word)
    {
        if(root->left == NULL)
            cout<<"Not found"<<endl;
        else 
            search(root->left, key);
    }
    else if(key>root->word)
    {
        if(root->right == NULL)
            cout<<"Not found"<<endl;
        else 
            search(root->right, key);
    }
    else
        if (root->word == key)
        {
            cout<<"Word: "<<root->word<<" ";
            cout<<"Meaning: "<<root->meaning<<endl;
        }
        
        
}
void dict::descend(node *temp)
{
    if(temp != NULL)
    {
        descend(temp->right);
        cout<<"Word: "<<temp->word<<" ";
        cout<<"Meaning: "<<temp->meaning<<endl;
        descend(temp->left);
    }
}

void dict::ascend(node* temp)
{
    if (temp != NULL)
    {
        ascend(temp->left);
        cout<<"Word: "<<temp->word<<" ";
        cout<<"Meaning: "<<temp->meaning<<endl;
        ascend(temp->right);
    }
    
}

node* dict::deleteNode(node * root, string key)
{
    if(root == NULL) 
        return root;
    
    node *temp;
    temp = new node;
    if(key < root->word)
    {
        if(root->left == NULL)
            cout<<"Not found"<<endl;
        else
            root->left = deleteNode(root->left, key);
    }
    else if(key > root->word)
    {
        if(root->right == NULL)
            cout<<"Not found"<<endl;
        else
            root->right = deleteNode(root->right, key);
    }
    else
    {
        if(root->right == NULL)
        {
            temp = root->left;
            delete(root);
            return temp;
        }
        if(root->left == NULL)
        {
            temp = root->right;
            delete(root);
            return temp;
        }
        //temp = minValue(root->right);
        root->word = temp->word;
        root->right = deleteNode(root->right, temp->word);
    }
    return root;
}


int main()
{
    dict d1;
    int ch;
    char n;
    string key;
    x:d1.create();
    cout<<"Do you want to continue(Y/N): ";
    cin>>n;
    if(n=='Y' || n=='y') goto x;
    while(1)
    {
        cout<<"1. Enter Data"<<endl;
        cout<<"2. Inorder"<<endl;
        cout<<"3. Search"<<endl;
        cout<<"4. Descending"<<endl;
        cout<<"5. Ascending"<<endl;
        cout<<"6. Delete"<<endl;
        cout<<"7. Exit"<<endl;
        cin>>ch;
        switch(ch)
        {
            case 1:
                d1.create();
                break;
            case 2:
                d1.treeTraversal();
                break;
            case 3:
                cout<<"Enter the word you want meaning for :"<<endl;
                cin>>key;
                d1.search(d1.root, key);
                break;
            case 4:
                d1.descend(d1.root);
                break;
            case 5:
                d1.ascend(d1.root);
                break;
            case 6:
                cout<<"Enter the word you want to delete:"<<endl;
                cin>>key;
                d1.deleteNode(d1.root, key);
                cout<<"Node Deleted !"<<endl;
                break;
            case 7:
                exit(1); 
                break;
            default:
                break;
        }
 Â Â Â }
Â Â Â Â 
Â Â Â Â 
}
